/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mtxClient_H
#define mtxClient_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "mtx-client_types.h"

namespace com { namespace twitter { namespace service { namespace snowflake { namespace gen {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class mtxClientIf {
 public:
  virtual ~mtxClientIf() {}
  virtual int64_t getUniqueId(const std::string& key) = 0;
};

class mtxClientIfFactory {
 public:
  typedef mtxClientIf Handler;

  virtual ~mtxClientIfFactory() {}

  virtual mtxClientIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(mtxClientIf* /* handler */) = 0;
  };

class mtxClientIfSingletonFactory : virtual public mtxClientIfFactory {
 public:
  mtxClientIfSingletonFactory(const ::std::shared_ptr<mtxClientIf>& iface) : iface_(iface) {}
  virtual ~mtxClientIfSingletonFactory() {}

  virtual mtxClientIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(mtxClientIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<mtxClientIf> iface_;
};

class mtxClientNull : virtual public mtxClientIf {
 public:
  virtual ~mtxClientNull() {}
  int64_t getUniqueId(const std::string& /* key */) override {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _mtxClient_getUniqueId_args__isset {
  _mtxClient_getUniqueId_args__isset() : key(false) {}
  bool key :1;
} _mtxClient_getUniqueId_args__isset;

class mtxClient_getUniqueId_args {
 public:

  mtxClient_getUniqueId_args(const mtxClient_getUniqueId_args&);
  mtxClient_getUniqueId_args& operator=(const mtxClient_getUniqueId_args&);
  mtxClient_getUniqueId_args() noexcept
                             : key() {
  }

  virtual ~mtxClient_getUniqueId_args() noexcept;
  std::string key;

  _mtxClient_getUniqueId_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const mtxClient_getUniqueId_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const mtxClient_getUniqueId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const mtxClient_getUniqueId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class mtxClient_getUniqueId_pargs {
 public:


  virtual ~mtxClient_getUniqueId_pargs() noexcept;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _mtxClient_getUniqueId_result__isset {
  _mtxClient_getUniqueId_result__isset() : success(false) {}
  bool success :1;
} _mtxClient_getUniqueId_result__isset;

class mtxClient_getUniqueId_result {
 public:

  mtxClient_getUniqueId_result(const mtxClient_getUniqueId_result&) noexcept;
  mtxClient_getUniqueId_result& operator=(const mtxClient_getUniqueId_result&) noexcept;
  mtxClient_getUniqueId_result() noexcept
                               : success(0) {
  }

  virtual ~mtxClient_getUniqueId_result() noexcept;
  int64_t success;

  _mtxClient_getUniqueId_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const mtxClient_getUniqueId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const mtxClient_getUniqueId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const mtxClient_getUniqueId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _mtxClient_getUniqueId_presult__isset {
  _mtxClient_getUniqueId_presult__isset() : success(false) {}
  bool success :1;
} _mtxClient_getUniqueId_presult__isset;

class mtxClient_getUniqueId_presult {
 public:


  virtual ~mtxClient_getUniqueId_presult() noexcept;
  int64_t* success;

  _mtxClient_getUniqueId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class mtxClientClient : virtual public mtxClientIf {
 public:
  mtxClientClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  mtxClientClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t getUniqueId(const std::string& key) override;
  void send_getUniqueId(const std::string& key);
  int64_t recv_getUniqueId();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class mtxClientProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<mtxClientIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (mtxClientProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getUniqueId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  mtxClientProcessor(::std::shared_ptr<mtxClientIf> iface) :
    iface_(iface) {
    processMap_["getUniqueId"] = &mtxClientProcessor::process_getUniqueId;
  }

  virtual ~mtxClientProcessor() {}
};

class mtxClientProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  mtxClientProcessorFactory(const ::std::shared_ptr< mtxClientIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< mtxClientIfFactory > handlerFactory_;
};

class mtxClientMultiface : virtual public mtxClientIf {
 public:
  mtxClientMultiface(std::vector<std::shared_ptr<mtxClientIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~mtxClientMultiface() {}
 protected:
  std::vector<std::shared_ptr<mtxClientIf> > ifaces_;
  mtxClientMultiface() {}
  void add(::std::shared_ptr<mtxClientIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t getUniqueId(const std::string& key) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUniqueId(key);
    }
    return ifaces_[i]->getUniqueId(key);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class mtxClientConcurrentClient : virtual public mtxClientIf {
 public:
  mtxClientConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  mtxClientConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t getUniqueId(const std::string& key) override;
  int32_t send_getUniqueId(const std::string& key);
  int64_t recv_getUniqueId(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}}}} // namespace

#endif
